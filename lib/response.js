// Generated by CoffeeScript 1.6.2
(function() {
  var Q, eslResponse,
    __slice = [].slice;

  Q = require('q');

  module.exports = eslResponse = (function() {
    function eslResponse(socket, headers, body) {
      this.socket = socket;
      this.headers = headers;
      this.body = body;
    }

    eslResponse.prototype.register_callback = function(event, cb) {
      var _this = this;

      this.socket.removeAllListeners(event);
      return this.socket.on(event, function(res) {
        _this.socket.removeAllListeners(event);
        return cb(res);
      });
    };

    eslResponse.prototype.send = function(command, args, cb) {
      var deferred, e, key, value, _ref;

      if (typeof args === 'function' && (cb == null)) {
        _ref = [args, null], cb = _ref[0], args = _ref[1];
      }
      if (exports.debug) {
        util.log(util.inspect({
          command: command,
          args: args
        }));
      }
      deferred = Q.defer();
      this.register_callback('esl_command_reply', function(call) {
        deferred.resolve(call);
        return typeof cb === "function" ? cb(call) : void 0;
      });
      try {
        this.socket.write("" + command + "\n");
        if (args != null) {
          for (key in args) {
            value = args[key];
            this.socket.write("" + key + ": " + value + "\n");
          }
        }
        this.socket.write("\n");
      } catch (_error) {
        e = _error;
        deferred.reject(e);
        this.socket.emit('esl_error', {
          error: e
        });
      }
      return deferred.promise;
    };

    eslResponse.prototype.on = function(event, listener) {
      var deferred;

      deferred = Q.defer();
      this.socket.on(event, function() {
        var args;

        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        deferred.resolve.apply(deferred, args);
        return typeof listener === "function" ? listener.apply(null, args) : void 0;
      });
      return deferred.promise;
    };

    eslResponse.prototype.end = function() {
      return this.socket.end();
    };

    eslResponse.prototype.api = function(command, cb) {
      if (cb != null) {
        this.register_callback('esl_api_response', cb);
      }
      return this.send("api " + command);
    };

    eslResponse.prototype.bgapi = function(command, cb) {
      this.register_callback('esl_command_reply', function(res) {
        var r, _ref;

        r = (_ref = res.headers['Reply-Text']) != null ? _ref.match(/\+OK Job-UUID: (.+)$/) : void 0;
        return typeof cb === "function" ? cb(r[1]) : void 0;
      });
      return this.send("bgapi " + command);
    };

    eslResponse.prototype.event_json = function() {
      var cb, events, _i;

      events = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), cb = arguments[_i++];
      return this.send("event json " + (events.join(' ')), cb);
    };

    eslResponse.prototype.nixevent = function() {
      var cb, events, _i;

      events = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), cb = arguments[_i++];
      return this.send("nixevent " + (events.join(' ')), cb);
    };

    eslResponse.prototype.noevents = function(cb) {
      return this.send("noevents", cb);
    };

    eslResponse.prototype.filter = function(header, value, cb) {
      return this.send("filter " + header + " " + value, cb);
    };

    eslResponse.prototype.filter_delete = function(header, value, cb) {
      if (value != null) {
        return this.send("filter delete " + header + " " + value, cb);
      } else {
        return this.send("filter delete " + header, cb);
      }
    };

    eslResponse.prototype.sendevent = function(event_name, args, cb) {
      return this.send("sendevent " + event_name, args, cb);
    };

    eslResponse.prototype.auth = function(password, cb) {
      return this.send("auth " + password, cb);
    };

    eslResponse.prototype.connect = function(cb) {
      return this.send("connect", cb);
    };

    eslResponse.prototype.linger = function(cb) {
      return this.send("linger", cb);
    };

    eslResponse.prototype.exit = function(cb) {
      return this.send("exit", cb);
    };

    eslResponse.prototype.log = function(level, cb) {
      var _ref;

      if (typeof level === 'function') {
        _ref = [null, level], level = _ref[0], cb = _ref[1];
      }
      if (level != null) {
        return this.send("log " + level, cb);
      } else {
        return this.send("log", cb);
      }
    };

    eslResponse.prototype.nolog = function(cb) {
      return this.send("nolog", cb);
    };

    eslResponse.prototype.sendmsg_uuid = function(uuid, command, args, cb) {
      var execute_text, options;

      options = args != null ? args : {};
      options['call-command'] = command;
      execute_text = uuid != null ? "sendmsg " + uuid : 'sendmsg';
      return this.send(execute_text, options, cb);
    };

    eslResponse.prototype.sendmsg = function(command, args, cb) {
      return this.sendmsg_uuid(null, command, args, cb);
    };

    eslResponse.prototype.execute_uuid = function(uuid, app_name, app_arg, cb) {
      var options;

      options = {
        'execute-app-name': app_name,
        'execute-app-arg': app_arg
      };
      return this.sendmsg_uuid(uuid, 'execute', options, cb);
    };

    eslResponse.prototype.command_uuid = function(uuid, app_name, app_arg, cb) {
      var event;

      if (cb != null) {
        event = "CHANNEL_EXECUTE_COMPLETE " + app_name + " " + app_arg;
        this.register_callback(event, cb);
      }
      return this.execute_uuid(uuid, app_name, app_arg);
    };

    eslResponse.prototype.hangup_uuid = function(uuid, hangup_cause, cb) {
      var options;

      if (hangup_cause == null) {
        hangup_cause = 'NORMAL_UNSPECIFIED';
      }
      options = {
        'hangup-cause': hangup_cause
      };
      return this.sendmsg_uuid(uuid, 'hangup', options, cb);
    };

    eslResponse.prototype.unicast_uuid = function(uuid, args, cb) {
      return this.sendmsg_uuid(uuid, 'unicast', args, cb);
    };

    eslResponse.prototype.execute = function(app_name, app_arg, cb) {
      return this.execute_uuid(null, app_name, app_arg, cb);
    };

    eslResponse.prototype.command = function(app_name, app_arg, cb) {
      return this.command_uuid(null, app_name, app_arg, cb);
    };

    eslResponse.prototype.hangup = function(hangup_cause, cb) {
      return this.hangup_uuid(null, hangup_cause, cb);
    };

    eslResponse.prototype.unicast = function(args, cb) {
      return this.unicast_uuid(null, args, cb);
    };

    eslResponse.prototype.auto_cleanup = function() {
      var _this = this;

      this.on('esl_disconnect_notice', function(call) {
        if (exports.debug) {
          util.log("Received ESL disconnection notice");
        }
        switch (call.headers['Content-Disposition']) {
          case 'linger':
            if (exports.debug) {
              util.log("Sending esl_linger");
            }
            return _this.socket.emit('esl_linger', call);
          case 'disconnect':
            if (exports.debug) {
              util.log("Sending esl_disconnect");
            }
            return _this.socket.emit('esl_disconnect', call);
        }
      });
      this.on('esl_linger', function() {
        return _this.exit();
      });
      return this.on('esl_disconnect', function() {
        return _this.end();
      });
    };

    return eslResponse;

  })();

}).call(this);
