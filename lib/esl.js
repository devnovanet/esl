// Generated by CoffeeScript 1.6.2
(function() {
  var connectionListener, eslClient, eslParser, eslResponse, eslServer, net, util,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  net = require('net');

  util = require('util');

  exports.debug = false;

  eslParser = require('./parser');

  eslResponse = require('./response');

  connectionListener = function(socket) {
    var parser;

    socket.setEncoding('ascii');
    parser = new eslParser(socket);
    socket.on('data', function(data) {
      return parser.on_data(data);
    });
    socket.on('end', function() {
      return parser.on_end();
    });
    socket.on('CHANNEL_EXECUTE_COMPLETE', function(res) {
      var application, application_data;

      application = res.body['Application'];
      application_data = res.body['Application-Data'];
      return socket.emit("CHANNEL_EXECUTE_COMPLETE " + application + " " + application_data, res);
    });
    parser.process = function(headers, body) {
      var error, event, n, res, _i, _len, _ref;

      if (exports.debug) {
        util.log(util.inspect({
          headers: headers,
          body: body
        }));
      }
      switch (headers['Content-Type']) {
        case 'auth/request':
          event = 'esl_auth_request';
          break;
        case 'command/reply':
          event = 'esl_command_reply';
          if (headers['Event-Name'] === 'CHANNEL_DATA') {
            body = headers;
            headers = {};
            _ref = ['Content-Type', 'Reply-Text', 'Socket-Mode', 'Control'];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              n = _ref[_i];
              headers[n] = body[n];
              delete body[n];
            }
          }
          break;
        case 'text/event-json':
          try {
            body = JSON.parse(body);
          } catch (_error) {
            error = _error;
            util.log("JSON " + error + " in " + body);
            return;
          }
          event = body['Event-Name'];
          break;
        case 'text/event-plain':
          body = parse_header_text(body);
          event = body['Event-Name'];
          break;
        case 'log/data':
          event = 'esl_log_data';
          break;
        case 'text/disconnect-notice':
          event = 'esl_disconnect_notice';
          break;
        case 'api/response':
          event = 'esl_api_response';
          break;
        default:
          event = headers['Content-Type'];
      }
      res = new eslResponse(socket, headers, body);
      if (exports.debug) {
        util.log(util.inspect({
          event: event,
          res: res
        }));
      }
      return socket.emit(event, res);
    };
    return socket.emit('esl_connect', new eslResponse(socket));
  };

  eslServer = (function(_super) {
    __extends(eslServer, _super);

    function eslServer(requestListener) {
      this.on('connection', function(socket) {
        socket.on('esl_connect', requestListener);
        return connectionListener(socket);
      });
      eslServer.__super__.constructor.call(this);
    }

    return eslServer;

  })(net.Server);

  exports.createCallServer = function() {
    var server;

    server = new eslServer(function(call) {
      var Unique_ID;

      Unique_ID = 'Unique-ID';
      return call.connect(function(call) {
        var unique_id;

        unique_id = call.body[Unique_ID];
        call.auto_cleanup();
        return call.filter(Unique_ID, unique_id, function() {
          return call.event_json('ALL', function() {
            return server.emit('CONNECT', call);
          });
        });
      });
    });
    return server;
  };

  eslClient = (function(_super) {
    __extends(eslClient, _super);

    function eslClient() {
      this.on('connect', function() {
        return connectionListener(this);
      });
      eslClient.__super__.constructor.call(this);
    }

    return eslClient;

  })(net.Socket);

  exports.createClient = function() {
    return new eslClient();
  };

}).call(this);
